#+Title: Git Version Control System - 1
#+Author: Vāsudēv Kāmat
#+Email: vasudev@copyninja.info


#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_mathjax:nil reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1300 reveal_height:800 toc:nil frag: t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: night
#+REVEAL_TRANS: cube
#+REVEAL_ROOT: http://talks.copyninja.info/reveal.js


* What is Revision Control/Source Control?.
#+ATTR_REVEAL: :frag (appear appear)
  - SCM - Software Configuration Management
    #+BEGIN_NOTES
    - identification
    - control
    - Status accounting
    - auditing
    - build management
    - process management
    - team work
    - defect tracking
   #+END_NOTES
  - Ability to track different versions of software

* Types of Version Control system
#+ATTR_REVEAL: :frag (appear appear)
  - Centralized
    #+BEGIN_NOTES
     - Central authoritative repository
     - Check-in Check-out branching wrt the central repository
     - Possibility of overwrite when 2 developers change same file. Eg. - CVS
       - Atomic Commits
       - File Locking
       - Version Merging
	 - works well with text file
	 - image file problematic
	 - possible logic error introduction
       - Baselines labels and tags
    #+END_NOTES
  - Distributed
    #+BEGIN_NOTES
     - No canonical code copy only working copy
     - Each working copy is full remote backup
     - Common operations are fast as no network operation involved (commits log etc.)
     - Multiple mirrors can be setup
    #+END_NOTES

* What is Git?
  #+ATTR_REVEAL: :frag (roll-in roll-in roll-in)
   - DVCS
   - Developer for Linux kernel project by Linus Torvalds
   - Features
     #+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in roll-in)
     - Fast branching - branches are light weight
     - Distributed nature
     - Works with existing protocols FTP, HTTP, rsync, SSH and Git
       over plain text or SSH
     - Fast and Scalable
     - Cryptographic authentication of history.
       #+BEGIN_NOTES
       Git uses SHA-1 to create commit, its possible to verify entire
       directory of commit if we get top level SHA-1 object from
       trusted source.

       Trusted source is got by GPG/PGP digital signing.
       #+END_NOTES
   #+REVEAL: split
   #+ATTR_REVEAL: :frag (roll-in roll-in roll-in)
   - Toolkit based design
     #+BEGIN_NOTES
      Every git command is independent binary or shell wrapper around
      multiple binary rather than single complicated blob.

      All these binaries are used together as required to perform git
      operations.
     #+END_NOTES
   - Garbage collection
   - Packing the data (packfile)

* Starting with Git
  Git has 3 main states where your file can be reside
  #+ATTR_REVEAL: :frag (highlight-red highlight-red highlight-red)
  1. Commited
  2. Modified
  3. Staged

  #+REVEAL: split

  #+ATTR_REVEAL: :frag roll-in
  [[./images/areas.png]]

** Installing Git
*** Linux
  - RedHat and derivatives
    #+BEGIN_SRC shell
      sudo yum install git
    #+END_SRC
  - Debian and derivatives
    #+BEGIN_SRC shell
      sudo apt-get install git
    #+END_SRC

*** Windows
  - [[http://git-scm.com/download/win%20][From official Git site]]
  - Msys Git available at [[http://msys.github.io/]]
  - Github for Windows also provides git command line utilities
    available from [[http://windows.github.com/]]

*** Mac
  - [[http://git-scm.com/download/mac.][Official Git site]]
  - Xcode developer tools from Mac comes with default Git installation.
  - Github utility for mac also provides command line tools for git,
    available from [[http://mac.github.com/]]

** Configuring Git

*** Author information
   #+BEGIN_SRC sh
     git config --global user.name "Vasudev Kamath"
     git config --global user.email "vasudev@copyninja.info"
   #+END_SRC

    Configuration files
    #+ATTR_REVEAL: :frag (appear appear appear)
    1. /etc/gitconfig system level configuration information accessed
       with `--system` option to `git config` command. Used across the
       system.
    2. ~/.gitconfig or ~/.config/git/config global user configuration
       options.
    3. ~/.git/config repository specific configurations.

*** Editor information
    #+BEGIN_SRC sh
      git config --global core.editor nano
    #+END_SRC

*** Reading configuration values
    Listing all configuration values
    #+BEGIN_SRC sh
      git config --list
    #+END_SRC

    Specific value
    #+BEGIN_SRC sh
      git config user.name
      Vasudev Kamath
    #+END_SRC

** Accessing Help on Command
   `git help <verb>`

   Verb - Command name

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC sh
     git help config
   #+END_SRC

* Creating Git Repository

  For already existing project

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git init
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  Add all required files and do initial commit

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git add *.c
    git add *.h
    git add LICENSE
    git commit -m "Initial project version"
  #+END_SRC

#+REVEAL: split

  Getting remote repository
  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git clone [url]
  #+END_SRC

  URL can be `git:|http|https|git+ssh:`

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git clone https://github.com/libgit2/libgit2
  #+END_SRC
 Recording Changes to Repository
  File can be of 2 state in working directory
  1. Tracked
  2. Untracked

  #+ATTR_REVEAL: :frag appear
  Each Tracked file can be in 3 states
  #+ATTR_REVEAL: :frag appear
  1. Unmodified
  2. Modified
  3. Staged

#+REVEAL: split
  [[./images/lifecycle.png]]

#+REVEAL: split

** Checking the Status
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git status
     On branch master
     nothing to commit, working directory clean
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ echo 'My Project' > README
     $ git status
     On branch master
     Untracked files:
       (use "git add <file>..." to include in what will be committed)

         README

     nothing added to commit but untracked files present (use "git add" to track)
   #+END_SRC

** Tracking New files
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git add README
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         new file:   README
   #+END_SRC

** Staging Modified files
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         new file:   README

     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

         modified:   CONTRIBUTING.md
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git add CONTRIBUTING.md
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         new file:   README
         modified:   CONTRIBUTING.md
   #+END_SRC

#+REVEAL: split
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ vim CONTRIBUTING.md
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         new file:   README
         modified:   CONTRIBUTING.md

     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

         modified:   CONTRIBUTING.md
   #+END_SRC

** Ignoring Certain files
   
   Ignore files not needed in project, mostly generated by build
   process or IDE.

   [[https://www.gitignore.io/]]

** Viewing changes done
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git diff
     diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
     index 8ebb991..643e24f 100644
     --- a/CONTRIBUTING.md
     +++ b/CONTRIBUTING.md
     @@ -65,7 +65,8 @@ branch directly, things can get messy.
      Please include a nice description of your changes when you submit your PR;
      if we have to read the whole diff to figure out why you're contributing
      in the first place, you're less likely to get feedback and have your change
     -merged in.
     +merged in. Also, split your changes into comprehensive chunks if you patch is
     +longer than a dozen lines.

      If you are starting to work on a particular area, feel free to submit a PR
      that highlights your work in progress (and note in the PR title that it's
   #+END_SRC

#+REVEAL: split
   Looking for changes in  staged file
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git diff --staged
     diff --git a/README b/README
     new file mode 100644
     index 0000000..03902a1
     --- /dev/null
     +++ b/README
     @@ -0,0 +1 @@
     +My Project
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   ~--cached~ is synonym for ~--staged~

** Commiting Changes
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git commit
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     # Please enter the commit message for your changes. Lines starting
     # with '#' will be ignored, and an empty message aborts the commit.
     # On branch master
     # Changes to be committed:
     #       new file:   README
     #       modified:   CONTRIBUTING.md
     #
     ~
     ~
     ~
     ".git/COMMIT_EDITMSG" 9L, 283C
   #+END_SRC

#+REVEAL: split
   Providing commit message in command line
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git commit -m "Story 182: Fix benchmarks for speed"
     [master 463dc4f] Story 182: Fix benchmarks for speed
      2 files changed, 2 insertions(+)
      create mode 100644 README
   #+END_SRC

   Skipping the staging area

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git status
     On branch master
     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

         modified:   CONTRIBUTING.md

     no changes added to commit (use "git add" and/or "git commit -a")
     $ git commit -a -m 'added new benchmarks'
     [master 83e38c7] added new benchmarks
      1 file changed, 5 insertions(+), 0 deletions(-)
   #+END_SRC

** Removing and moving files
   Removing files
   
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ rm PROJECTS.md
     $ git status
     On branch master
     Your branch is up-to-date with 'origin/master'.
     Changes not staged for commit:
       (use "git add/rm <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

             deleted:    PROJECTS.md

     no changes added to commit (use "git add" and/or "git commit -a")
   #+END_SRC

   Now remove the file from tracking

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git rm PROJECTS.md
     rm 'PROJECTS.md'
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         deleted:    PROJECTS.md
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   ~--cached~ option used for removing files from staging area

   #+REVEAL: split
   
   Moving files
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git mv README.md README
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

          renamed:    README.md -> README
   #+END_SRC
** Viewing History
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     git log -2
     commit 99090a8522f65ddf6348f35999694d347a884c15                    
     Merge: f034c85 dd6b24b                                             
     Author: Carlos Martín Nieto <cmn@dwim.me>                          
     Date:   Fri Jul 3 00:38:33 2015 +0200                              
                                                                        
         Merge pull request #3289 from ethomson/warnings4               
                                                                        
         iterator_walk: cast away constness for free                    
                                                                        
     commit f034c8518ea955308e1bf31cf57e030fce3b0276                    
     Merge: eb94199 79306d8                                             
     Author: Carlos Martín Nieto <cmn@dwim.me>                          
     Date:   Thu Jul 2 17:55:16 2015 +0200                              
                                                                        
         Merge pull request #3287 from ethomson/filter_test_cleanup     
                                                                        
         filter::stream: free the filter sanely                         
                                                                        
   #+END_SRC

#+REVEAL: split
   #+BEGIN_SRC shell
     $ git log -p -2                                                   
     commit 99090a8522f65ddf6348f35999694d347a884c15                   
     Merge: f034c85 dd6b24b                                            
     Author: Carlos Martín Nieto <cmn@dwim.me>                         
     Date:   Fri Jul 3 00:38:33 2015 +0200                             
                                                                       
         Merge pull request #3289 from ethomson/warnings4              
                                                                       
         iterator_walk: cast away constness for free                   
                                                                       
     commit f034c8518ea955308e1bf31cf57e030fce3b0276                   
     Merge: eb94199 79306d8                                            
     Author: Carlos Martín Nieto <cmn@dwim.me>                         
     Date:   Thu Jul 2 17:55:16 2015 +0200                             
                                                                       
         Merge pull request #3287 from ethomson/filter_test_cleanup    
                                                                       
         filter::stream: free the filter sanely                        
   #+END_SRC

#+REVEAL: split
   #+BEGIN_SRC shell
     $ git log --stat
     commit ca82a6dff817ec66f44342007202690a93763949
     Author: Scott Chacon <schacon@gee-mail.com>
     Date:   Mon Mar 17 21:52:11 2008 -0700

         changed the version number

      Rakefile | 2 +-
      1 file changed, 1 insertion(+), 1 deletion(-)

     commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
     Author: Scott Chacon <schacon@gee-mail.com>
     Date:   Sat Mar 15 16:40:33 2008 -0700

         removed unnecessary test

      lib/simplegit.rb | 5 -----
      1 file changed, 5 deletions(-)

     commit a11bef06a3f659402fe7563abf99ad00de2209e6
     Author: Scott Chacon <schacon@gee-mail.com>
     Date:   Sat Mar 15 10:31:28 2008 -0700

         first commit

      README           |  6 ++++++
      Rakefile         | 23 +++++++++++++++++++++++
      lib/simplegit.rb | 25 +++++++++++++++++++++++++
      3 files changed, 54 insertions(+)
   #+END_SRC
** Unmodifying things
   Ammending commits done using git commit ~--ammend~
   
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git commit -m 'initial commit'
     $ git add forgotten_file
     $ git commit --amend
   #+END_SRC

   Unstaging staged files
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git add .
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         renamed:    README.md -> README
         modified:   CONTRIBUTING.md
   #+END_SRC

   #+REVEAL: split
   #+BEGIN_SRC shell
     $ git reset HEAD CONTRIBUTING.md
     Unstaged changes after reset:
     M       CONTRIBUTING.md
     $ git status
     On branch master
     Changes to be committed:
       (use "git reset HEAD <file>..." to unstage)

         renamed:    README.md -> README

     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

         modified:   CONTRIBUTING.md
   #+END_SRC

   #+REVEAL: split
   
   Unmofiying modified files can be done with git checkout command
   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     Changes not staged for commit:
       (use "git add <file>..." to update what will be committed)
       (use "git checkout -- <file>..." to discard changes in working directory)

         modified:   CONTRIBUTING.md
   #+END_SRC

   #+ATTR_REVEAL: :frag appear
   #+BEGIN_SRC shell
     $ git checkout -- CONTRIBUTING.md
     $ git status
     On branch master
     nothing to commit working directory clean.
   #+END_SRC
* What we learnt today?
  #+ATTR_REVEAL: :frag (appear appear appear appear)
  1. Types of Version Control systems
  2. Features of DVCS and Centeralized VCS
  3. Features of Git
  4. How to do basic operations
     #+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in roll-in roll-in roll-in roll-in)
     1. Creating repository
     2. Status checking
     3. Tracking untracking files
     4. Looking at differences
     5. Ignoring files in project
     6. Commiting
     7. Looking at history
     8. Undoing things

* Is this all about Git?.
  No!.

* Next Session
  #+ATTR_REVEAL: :frag (roll-in roll-in roll-in)
  1. Managing remote repositories
  2. Interacting with remote repositories
  3. Git internals

* Questions?
* References
  1. https://git-scm.com/book/en/v2/
  2. [[https://www.kernel.org/pub/software/scm/git/docs/]]
  3. [[https://en.wikipedia.org/wiki/Distributed_revision_control]]
  4. [[https://en.wikipedia.org/wiki/Git_%28software%29]]
