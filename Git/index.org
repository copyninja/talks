#+Title: Git Version Control System
#+Author: Vāsudēv Kāmat 
#+Email: vasudev@copyninja.info


#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_mathjax:nil reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1300 reveal_height:800 toc:nil frag: t

#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: night
#+REVEAL_TRANS: cube
#+REVEAL_ROOT: http://talks.copyninja.info/reveal.js


* What is Revision Control/Source Control?.
#+ATTR_REVEAL: :frag (appear appear)
  - SCM - Software Configuration Management
    #+BEGIN_NOTES
    - identification
    - control
    - Status accounting
    - auditing
    - build management
    - process management
    - team work
    - defect tracking
   #+END_NOTES
  - Ability to track different versions of software

* Types of Version Control system
#+ATTR_REVEAL: :frag (appear appear)
  - Centralized
    #+BEGIN_NOTES
     - Central authoritative repository
     - Check-in Check-out branching wrt the central repository
     - Possibility of overwrite when 2 developers change same file. Eg. - CVS
       - Atomic Commits
       - File Locking
       - Version Merging
	 - works well with text file
	 - image file problematic
	 - possible logic error introduction
       - Baselines labels and tags
    #+END_NOTES
  - Distributed
    #+BEGIN_NOTES
     - No canonical code copy only working copy
     - Each working copy is full remote backup
     - Common operations are fast as no network operation involved (commits log etc.)
     - Multiple mirrors can be setup
    #+END_NOTES

* What is Git?
  #+ATTR_REVEAL: :frag (roll-in roll-in roll-in)
   - DVCS
   - Developer for Linux kernel project by Linus Torvalds
   - Features
     #+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in roll-in)
     - Fast branching - branches are light weight
     - Distributed nature
     - Works with existing protocols FTP, HTTP, rsync, SSH and Git
       over plain text or SSH
     - Fast and Scalable
     - Cryptographic authentication of history.
       #+BEGIN_NOTES
       Git uses SHA-1 to create commit, its possible to verify entire
       directory of commit if we get top level SHA-1 object from
       trusted source.

       Trusted source is got by GPG/PGP digital signing.
       #+END_NOTES
   #+REVEAL: split
   #+ATTR_REVEAL: :frag (roll-in roll-in roll-in)
   - Toolkit based design
     #+BEGIN_NOTES
      Every git command is independent binary or shell wrapper around
      multiple binary rather than single complicated blob.

      All these binaries are used together as required to perform git
      operations.
     #+END_NOTES
   - Garbage collection
   - Packing the data (packfile)

* Starting with Git
  Git has 3 main states where your file can be reside
  #+ATTR_REVEAL: :frag (highlight-red highlight-red highlight-red)
  1. Commited
  2. Modified
  3. Staged

  #+REVEAL: split

  #+ATTR_REVEAL: :frag roll-in
  [[./images/areas.png]]

** Installing Git
*** Linux
  - RedHat and derivatives
    #+BEGIN_SRC shell
      sudo yum install git
    #+END_SRC
  - Debian and derivatives
    #+BEGIN_SRC shell
      sudo apt-get install git
    #+END_SRC

*** Windows
  - [[http://git-scm.com/download/win%20][From official Git site]]
  - Msys Git available at [[http://msys.github.io/]]
  - Github for Windows also provides git command line utilities
    available from [[http://windows.github.com/]]

*** Mac
  - [[http://git-scm.com/download/mac.][Official Git site]]
  - Xcode developer tools from Mac comes with default Git installation.
  - Github utility for mac also provides command line tools for git,
    available from [[http://mac.github.com/]]

** Configuring Git

*** Author information
   #+BEGIN_SRC sh
     git config --global user.name "Vasudev Kamath"
     git config --global user.email "vasudev@copyninja.info"
   #+END_SRC

    Configuration files
    #+ATTR_REVEAL: :frag (appear appear appear)
    1. /etc/gitconfig system level configuration information accessed
       with `--system` option to `git config` command. Used across the
       system.
    2. ~/.gitconfig or ~/.config/git/config global user configuration
       options.
    3. ~/.git/config repository specific configurations.

*** Editor information
    #+BEGIN_SRC sh
      git config --global core.editor nano
    #+END_SRC

*** Reading configuration values
    Listing all configuration values
    #+BEGIN_SRC sh
      git config --list
    #+END_SRC

    Specific value
    #+BEGIN_SRC sh
      git config user.name
      Vasudev Kamath
    #+END_SRC

** Accessing Help on Command
   `git help <verb>`

   Verb - Command name

   #+ATTR_REVEAL: :frag roll-in
   #+BEGIN_SRC sh
     git help config
   #+END_SRC

* Creating Git Repository

  For already existing project

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git init
  #+END_SRC

  #+ATTR_REVEAL: :frag roll-in
  Add all required files and do initial commit

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git add *.c
    git add *.h
    git add LICENSE
    git commit -m "Initial project version"
  #+END_SRC

#+REVEAL: split

  Getting remote repository
  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git clone [url]
  #+END_SRC

  URL can be `git:|http|https|git+ssh:`

  #+ATTR_REVEAL: :frag roll-in
  #+BEGIN_SRC sh
    git clone https://github.com/libgit2/libgit2
  #+END_SRC
* Recording Changes to Repository
  File can be of 2 state in working directory
  1. Tracked
  2. Untracked

  #+ATTR_REVEAL: :frag appear
  Each Tracked file can be in 3 states
  #+ATTR_REVEAL: :frag appear
  1. Unmodified
  2. Modified
  3. Staged

#+REVEAL: split
  [[./images/lifecycle.png]]
